1) Find middle of two numbers (left & right)  ->  left + (right - left)/2.
    -This helps in removing integer overflow when we do left + right in (left + right)/2 in JAVA.
    -In case of Javascript (left+right)/2 gives a value with decimal points so it needs to be Math.floor().

2) Find a number is perfect square or not ->
    - In JS ( x ** y ) operator is used for x to the power y so using that x to the power 1/2 will give
        square root without using square root function. [  (num **(1/2)) % 1==0;  ]
    - Can also use binary search for searching.
    - In Java : Math.floor(Math.pow(num,0.5)) == Math.pow(num,0.5)

3) Arrays.from() in Javascript accepts first as iterable object which can be an array or object and 
    second is the function for each iterable.
    So :
    Arrays.from({ length : 26 }, x => 0 ); returns an array of 26 elements all 0 . second arguement returns 0 for each.
    There is another way to to do this- new Array(26).fill(0);

4) Finding kth smallest element should aways point to heaps or in this case inorder traversal as inorder traversal is 
    left root right so it will give the whole tree in O(n) in a ascending sorted order. then finding the k-1th element 
    gives the kth smallest element. This inorder traversal can be done using recursion.



